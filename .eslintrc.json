// .eslintrc.json
{
  // configuration for javascript files
  "extends": [
    "next/core-web-vitals",
    "eslint:recommended",
    // This is the correct way to integrate Prettier with ESLint:
    // It disables ESLint rules that would conflict with Prettier's formatting.
    "plugin:prettier/recommended" // KEEP THIS! It handles the "eslint-config-prettier" part.
  ],
  "rules": {
    // DELETE THIS SECTION ENTIRELY from both the main rules and the overrides!
    // This rule is designed to report Prettier differences as ESLint errors.
    // If you're letting Prettier format on save, you don't need ESLint to also enforce formatting.
    // "prettier/prettier": [
    //   "error",
    //   {
    //     "singleQuote": true,
    //     "endOfLine": "auto",
    //     "semi": true // Or false
    //   }
    // ]
  },
  "ignorePatterns": ["next-env.d.ts"],
  "overrides": [
    // configuration for typescript files
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "plugins": [
        "@typescript-eslint",
        "unused-imports",
        "simple-import-sort",
        "tailwindcss"
      ],
      "extends": [
        "plugin:tailwindcss/recommended",
        "next/core-web-vitals",
        "plugin:prettier/recommended" // KEEP THIS!
      ],
      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "rules": {
        // DELETE THIS SECTION ENTIRELY from the overrides!
        // "prettier/prettier": [
        //   "error",
        //   {
        //     "singleQuote": true,
        //     "endOfLine": "auto",
        //     "semi": false // <-- THIS IS THE PROBLEM CONFLICTING WITH .prettierrc.json
        //   }
        // ],
        "@typescript-eslint/comma-dangle": "off", // Keep this set to "off" if you want Prettier to control it
        "@typescript-eslint/consistent-type-imports": "error",
        "@typescript-eslint/no-unused-vars": "off",
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": [
          "error",
          { "argsIgnorePattern": "^_" }
        ],
        "import/prefer-default-export": "off",
        "simple-import-sort/imports": "error",
        "simple-import-sort/exports": "error",
        "tailwindcss/no-custom-classname": "off",
        "tailwindcss/classnames-order": [
          "error",
          {
            "callees": ["cn", "clsx", "cva"],
            "prependCustom": true
          }
        ],
        "react/function-component-definition": [
          "error",
          {
            "namedComponents": ["function-declaration", "arrow-function"],
            "unnamedComponents": "arrow-function"
          }
        ],
        "jsx-quotes": ["error", "prefer-double"],
        "react/display-name": "off",
        "no-nested-ternary": "off",
        "import/no-extraneous-dependencies": "off",
        "react/no-unescaped-entities": "off"
      }
    },
    // configuration for testing
    {
      "files": ["**/*.test.ts", "**/*.test.tsx"],
      "plugins": ["jest", "jest-formatting", "testing-library", "jest-dom"],
      "extends": [
        "plugin:jest/recommended",
        "plugin:jest-formatting/recommended",
        "plugin:testing-library/react",
        "plugin:jest-dom/recommended"
      ]
    }
  ]
}
